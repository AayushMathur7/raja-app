"Code for the following raja-app-main/src/api/dashboard.jsx: \n export const initializeRepo = async (userEmailId, userEmail, repoLink) => {\n    try {\n        const response = await fetch('http://localhost:5000/v1/initialize-repo', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user_id: userEmailId, user_email: userEmail, repo_url: repoLink })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // If response contains any data that you want to return, parse and return it here\n        // return await response.json();\n    } catch (error) {\n        console.error(\"Failed to initialize repo:\", error);\n    }\n}\n\nexport const rajaAgent = async (details) => {\n  const { type, name, label, description, acceptance_criteria, how_to_reproduce } = details;\n\n  const filteredDetails = {\n    type,\n    name,\n    label,\n    description,\n    acceptance_criteria,\n    how_to_reproduce\n  };\n\n    try {\n        const response = await fetch('http://localhost:5000/v1/run-raja', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(filteredDetails)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const url = await response.json();\n        return url;\n\n    } catch (error) {\n        console.error(\"Failed to run raja agent:\", error);\n    }\n}\n\nexport const getTickets = async () => {\n    try {\n        const response = await fetch('http://localhost:5000/v1/get-tickets', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        return data;\n\n    } catch (error) {\n        console.error(\"Failed to fetch tickets:\", error);\n    }\n}\n\nexport const createTicket = async (ticketData) => {\n    try {\n        const response = await fetch('http://localhost:5000/v1/create-ticket', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(ticketData),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n    } catch (error) {\n        console.error(\"Failed to create ticket:\", error);\n    }\n} Code for the following raja-app-main/README.md: \n # Raja AI\n\nRaja AI is your newest team member for your software engineering project - fast, reliable, and cost-efficient. It leverages AI to comprehend your entire codebase and makes changes based on given engineering tickets. It generates relevant code and proactively submits a pull request, ready for human review and approval.\n\n## Table of Contents\n1. [Installation](#Installation)\n2. [Usage](#Usage)\n3. [Features](#Features)\n4. [Contribution](#Contribution)\n5. [Contact](#Contact)\n\n## Installation\n\nTo get the application running, you need to setup both the front-end and back-end environments.\n\n### Backend Setup\n\nYou can setup the backend Flask application using pipenv. From the root directory of the project, run the following commands:\n\n```bash\npipenv install\npipenv shell\ncd raja-app\npython3 server/app.py\n```\n\n### Frontend Setup\n\n```bash\ncd raja-app\nnpm install\nnpm run dev\n```\n\n### Usage\nWith the server running, you can navigate to localhost:5000 (for backend) and localhost:3000 (for frontend) on your browser to access and use the Raja AI application.\n\n### Features\nRaja AI offers the following features:\n\n- Interprets engineering tickets and generates relevant code\n- Makes changes to the codebase based on ticket details\n- Submits a pull request for human review\n\n### Contact\nIf you have any queries or issues to report, please create an issue in the GitHub repository.\n\n### License\nRaja AI is licensed under the MIT license. For more information, see the LICENSE file in the root directory.\n Code for the following raja-app-main/README.md: \n # Raja AI\n\nRaja AI is your newest team member for your software engineering project - fast, reliable, and cost-efficient. It leverages AI to comprehend your entire codebase and makes changes based on given engineering tickets. It generates relevant code and proactively submits a pull request, ready for human review and approval.\n\n## Table of Contents\n1. [Installation](#Installation)\n2. [Usage](#Usage)\n3. [Features](#Features)\n4. [Contribution](#Contribution)\n5. [Contact](#Contact)\n\n## Installation\n\nTo get the application running, you need to setup both the front-end and back-end environments.\n\n### Backend Setup\n\nYou can setup the backend Flask application using pipenv. From the root directory of the project, run the following commands:\n\n```bash\npipenv install\npipenv shell\ncd raja-app\npython3 server/app.py\n```\n\n### Frontend Setup\n\n```bash\ncd raja-app\nnpm install\nnpm run dev\n```\n\n### Usage\nWith the server running, you can navigate to localhost:5000 (for backend) and localhost:3000 (for frontend) on your browser to access and use the Raja AI application.\n\n### Features\nRaja AI offers the following features:\n\n- Interprets engineering tickets and generates relevant code\n- Makes changes to the codebase based on ticket details\n- Submits a pull request for human review\n\n### Contact\nIf you have any queries or issues to report, please create an issue in the GitHub repository.\n\n### License\nRaja AI is licensed under the MIT license. For more information, see the LICENSE file in the root directory.\n Code for the following raja-app-main/server/app.py: \n import os\nfrom pprint import pprint\n\nimport embeddings\nimport raja\nfrom dotenv import load_dotenv\nfrom flask import Flask, jsonify, request\nfrom flask_cors import CORS, cross_origin\nfrom ghapi.all import GhApi\n\nfrom convex import ConvexClient\n\napp = Flask(\"Raja\")\ncors = CORS(app)\n\n# get the directory of the current script\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n\n# go up one level to get the root directory\nroot_dir = os.path.dirname(current_dir)\n\ndotenv_path = os.path.join(root_dir, \".env.local\")\n\n# load the .env file\nload_dotenv(dotenv_path)\n\nclient = ConvexClient(os.getenv(\"NEXT_PUBLIC_CONVEX_URL\"))\nGH_TOKEN = os.getenv(\"GH_TOKEN\", \"\")\n\n\n@app.route(\"/v1/initialize-repo\", methods=[\"POST\"])\n@cross_origin()\ndef initialize_repo():\n    req_data = request.get_json()\n    user_id = req_data[\"user_id\"]\n    user_email = req_data[\"user_email\"]\n    repo_url = req_data[\"repo_url\"]\n\n    try:\n        folder_path, zip_url = embeddings.compute_prefix_and_zip_url(repo_url)\n        embeddings.execute_embedding_workflow(zip_url, folder_path)\n        repo_owner, repo_name = embeddings.get_repo_info(repo_url)\n        client.mutation(\n            \"repo:addRepo\",\n            {\n                \"user_id\": user_id,\n                \"user_email\": user_email,\n                \"url\": repo_url,\n                \"owner\": repo_owner,\n                \"name\": repo_name,\n            },\n        )\n    except ValueError as e:\n        return jsonify(error=str(e)), 400\n    return jsonify(message=\"Embedding workflow executed successfully\"), 200\n\n\n@app.route(\"/v1/run-raja\", methods=[\"POST\"])\ndef run_raja():\n    print(\"Running Raja\")\n    req_data = request.get_json()\n    print(req_data)\n    pr_url = raja.raja_agent(req_data)\n    return jsonify(message=\"Raja workflow executed successfully\", url=pr_url), 200\n\n\n@app.route(\"/v1/delete-all-except-main\", methods=[\"POST\"])\ndef delete_all_except_main():\n    req_data = request.get_json()\n    repo_owner = req_data[\"repo_owner\"]\n    repo_name = req_data[\"repo_name\"]\n    ghapi = GhApi(owner=repo_owner, repo=repo_name, token=GH_TOKEN)\n\n    # Get all branches\n    branches = ghapi.repos.list_branches()\n\n    for branch in branches:\n        # Delete the branch if its name is not 'main'\n        if branch.name != \"main\":\n            try:\n                ghapi.git.delete_ref(ref=f\"heads/{branch.name}\")\n                print(f\"Deleted branch: {branch.name}\")\n            except Exception as e:\n                print(f\"Error deleting branch {branch.name}: {e}\")\n\n    return {}\n\n\n@app.route(\"/v1/get-tickets\", methods=[\"GET\"])\ndef get_tickets():\n    tickets = client.query(\"tickets:get\")\n    print(tickets)\n    return tickets\n\n\n@app.route(\"/v1/create-ticket\", methods=[\"POST\"])\ndef create_ticket():\n    req_data = request.get_json()\n    print(req_data)\n    client.mutation(\"tickets:createTicket\", req_data)\n    return {}\n\n\nif __name__ == \"__main__\":\n    app.run(port=5000, debug=True) "